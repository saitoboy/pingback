import * as MediaDisciplinaBimestreModel from '../model/mediaDisciplinaBimestre.model';
import { MediaDisciplinaBimestre } from '../types/models';
import logger from '../utils/logger';

export class MediaDisciplinaBimestreService {
  
  // Listar todas as m√©dias
  static async listarTodas(): Promise<MediaDisciplinaBimestre[]> {
    try {
      logger.info('üîç Listando todas as m√©dias de disciplina por bimestre', 'media-disciplina-bimestre');
      const medias = await MediaDisciplinaBimestreModel.listarTodas();
      logger.info(`‚úÖ ${medias.length} m√©dias encontradas`, 'media-disciplina-bimestre');
      return medias;
    } catch (error) {
      logger.error('‚ùå Erro ao listar m√©dias de disciplina por bimestre', 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Buscar m√©dia por ID
  static async buscarPorId(media_disciplina_bimestre_id: string): Promise<MediaDisciplinaBimestre | undefined> {
    try {
      logger.info(`üîç Buscando m√©dia de disciplina por bimestre: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
      
      if (!media_disciplina_bimestre_id?.trim()) {
        throw new Error('ID da m√©dia √© obrigat√≥rio');
      }

      const media = await MediaDisciplinaBimestreModel.buscarPorId(media_disciplina_bimestre_id);
      
      if (media) {
        logger.info(`‚úÖ M√©dia encontrada: ID ${media.media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
      } else {
        logger.warning(`‚ö†Ô∏è M√©dia n√£o encontrada: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
      }
      
      return media;
    } catch (error) {
      logger.error(`‚ùå Erro ao buscar m√©dia: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Buscar m√©dias com detalhes
  static async buscarComDetalhes(media_disciplina_bimestre_id?: string): Promise<any> {
    try {
      if (media_disciplina_bimestre_id) {
        logger.info(`üîç Buscando m√©dia com detalhes: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
        const media = await MediaDisciplinaBimestreModel.buscarComDetalhes(media_disciplina_bimestre_id);
        if (media) {
          logger.info(`‚úÖ M√©dia com detalhes encontrada: ID ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
        } else {
          logger.warning(`‚ö†Ô∏è M√©dia com detalhes n√£o encontrada: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
        }
        return media;
      } else {
        logger.info('üîç Listando todas as m√©dias com detalhes', 'media-disciplina-bimestre');
        const medias = await MediaDisciplinaBimestreModel.buscarComDetalhes();
        logger.info(`‚úÖ ${medias.length} m√©dias com detalhes encontradas`, 'media-disciplina-bimestre');
        return medias;
      }
    } catch (error) {
      logger.error('‚ùå Erro ao buscar m√©dias com detalhes', 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Buscar m√©dias por matr√≠cula
  static async buscarPorMatricula(matricula_aluno_id: string): Promise<any[]> {
    try {
      logger.info(`üîç Buscando m√©dias da matr√≠cula: ${matricula_aluno_id}`, 'media-disciplina-bimestre');
      
      if (!matricula_aluno_id?.trim()) {
        throw new Error('ID da matr√≠cula √© obrigat√≥rio');
      }

      const medias = await MediaDisciplinaBimestreModel.buscarPorMatricula(matricula_aluno_id);
      logger.info(`‚úÖ ${medias.length} m√©dias encontradas para a matr√≠cula`, 'media-disciplina-bimestre');
      
      return medias;
    } catch (error) {
      logger.error(`‚ùå Erro ao buscar m√©dias da matr√≠cula: ${matricula_aluno_id}`, 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Buscar m√©dias por aluno
  static async buscarPorAluno(aluno_id: string): Promise<any[]> {
    try {
      logger.info(`üîç Buscando m√©dias do aluno: ${aluno_id}`, 'media-disciplina-bimestre');
      
      if (!aluno_id?.trim()) {
        throw new Error('ID do aluno √© obrigat√≥rio');
      }

      const medias = await MediaDisciplinaBimestreModel.buscarPorAluno(aluno_id);
      logger.info(`‚úÖ ${medias.length} m√©dias encontradas para o aluno`, 'media-disciplina-bimestre');
      
      return medias;
    } catch (error) {
      logger.error(`‚ùå Erro ao buscar m√©dias do aluno: ${aluno_id}`, 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Buscar m√©dias por turma e disciplina
  static async buscarPorTurmaEDisciplina(
    turma_id: string, 
    disciplina_id: string, 
    periodo_letivo_id?: string
  ): Promise<any[]> {
    try {
      const logMessage = periodo_letivo_id 
        ? `üîç Buscando m√©dias da turma ${turma_id} e disciplina ${disciplina_id} no per√≠odo ${periodo_letivo_id}`
        : `üîç Buscando m√©dias da turma ${turma_id} e disciplina ${disciplina_id}`;
      
      logger.info(logMessage, 'media-disciplina-bimestre');
      
      if (!turma_id?.trim()) {
        throw new Error('ID da turma √© obrigat√≥rio');
      }
      
      if (!disciplina_id?.trim()) {
        throw new Error('ID da disciplina √© obrigat√≥rio');
      }

      const medias = await MediaDisciplinaBimestreModel.buscarPorTurmaEDisciplina(
        turma_id, 
        disciplina_id,
        periodo_letivo_id
      );
      logger.info(`‚úÖ ${medias.length} m√©dias encontradas para a turma e disciplina`, 'media-disciplina-bimestre');
      
      return medias;
    } catch (error) {
      logger.error(`‚ùå Erro ao buscar m√©dias da turma e disciplina`, 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Buscar m√©dias por per√≠odo letivo
  static async buscarPorPeriodoLetivo(periodo_letivo_id: string): Promise<any[]> {
    try {
      logger.info(`üîç Buscando m√©dias do per√≠odo letivo: ${periodo_letivo_id}`, 'media-disciplina-bimestre');
      
      if (!periodo_letivo_id?.trim()) {
        throw new Error('ID do per√≠odo letivo √© obrigat√≥rio');
      }

      const medias = await MediaDisciplinaBimestreModel.buscarPorPeriodoLetivo(periodo_letivo_id);
      logger.info(`‚úÖ ${medias.length} m√©dias encontradas para o per√≠odo letivo`, 'media-disciplina-bimestre');
      
      return medias;
    } catch (error) {
      logger.error(`‚ùå Erro ao buscar m√©dias do per√≠odo letivo: ${periodo_letivo_id}`, 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Criar nova m√©dia
  static async criar(dadosMedia: Omit<MediaDisciplinaBimestre, 'media_disciplina_bimestre_id' | 'created_at' | 'updated_at'>): Promise<MediaDisciplinaBimestre> {
    try {
      logger.info('üìù Criando nova m√©dia de disciplina por bimestre', 'media-disciplina-bimestre');

      // Valida√ß√µes
      await this.validarDadosMedia(dadosMedia);

      // Verificar se j√° existe m√©dia para essa combina√ß√£o
      const jaExiste = await MediaDisciplinaBimestreModel.verificarExistenciaPorChaveUnica(
        dadosMedia.matricula_aluno_id,
        dadosMedia.turma_disciplina_professor_id,
        dadosMedia.periodo_letivo_id
      );

      if (jaExiste) {
        throw new Error('J√° existe uma m√©dia para esta combina√ß√£o de matr√≠cula, turma-disciplina-professor e per√≠odo letivo');
      }

      const mediaCriada = await MediaDisciplinaBimestreModel.criar(dadosMedia);
      logger.info(`‚úÖ M√©dia criada com sucesso: ID ${mediaCriada.media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
      
      return mediaCriada;
    } catch (error) {
      logger.error('‚ùå Erro ao criar m√©dia de disciplina por bimestre', 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Atualizar m√©dia
  static async atualizar(
    media_disciplina_bimestre_id: string,
    dadosAtualizacao: Partial<Omit<MediaDisciplinaBimestre, 'media_disciplina_bimestre_id' | 'created_at' | 'updated_at'>>
  ): Promise<MediaDisciplinaBimestre> {
    try {
      logger.info(`üìù Atualizando m√©dia: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');

      if (!media_disciplina_bimestre_id?.trim()) {
        throw new Error('ID da m√©dia √© obrigat√≥rio');
      }

      // Verificar se a m√©dia existe
      const mediaExistente = await this.buscarPorId(media_disciplina_bimestre_id);
      if (!mediaExistente) {
        throw new Error('M√©dia n√£o encontrada');
      }

      // Validar dados se fornecidos
      if (Object.keys(dadosAtualizacao).length > 0) {
        await this.validarDadosMedia(dadosAtualizacao, true);

        // Verificar unicidade se os campos √∫nicos foram alterados
        if (dadosAtualizacao.matricula_aluno_id || dadosAtualizacao.turma_disciplina_professor_id || dadosAtualizacao.periodo_letivo_id) {
          
          const matriculaId = dadosAtualizacao.matricula_aluno_id || mediaExistente.matricula_aluno_id;
          const turmaDisciplinaProfessorId = dadosAtualizacao.turma_disciplina_professor_id || mediaExistente.turma_disciplina_professor_id;
          const periodoLetivoId = dadosAtualizacao.periodo_letivo_id || mediaExistente.periodo_letivo_id;

          const jaExiste = await MediaDisciplinaBimestreModel.verificarExistenciaPorChaveUnica(
            matriculaId,
            turmaDisciplinaProfessorId,
            periodoLetivoId,
            media_disciplina_bimestre_id
          );

          if (jaExiste) {
            throw new Error('J√° existe uma m√©dia para esta combina√ß√£o de matr√≠cula, turma-disciplina-professor e per√≠odo letivo');
          }
        }
      }

      const mediaAtualizada = await MediaDisciplinaBimestreModel.atualizar(media_disciplina_bimestre_id, dadosAtualizacao);
      
      if (!mediaAtualizada) {
        throw new Error('Erro ao atualizar m√©dia');
      }
      
      logger.info(`‚úÖ M√©dia atualizada com sucesso: ID ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
      
      return mediaAtualizada;
    } catch (error) {
      logger.error(`‚ùå Erro ao atualizar m√©dia: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Deletar m√©dia
  static async deletar(media_disciplina_bimestre_id: string): Promise<void> {
    try {
      logger.info(`üóëÔ∏è Deletando m√©dia: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');

      if (!media_disciplina_bimestre_id?.trim()) {
        throw new Error('ID da m√©dia √© obrigat√≥rio');
      }

      // Verificar se a m√©dia existe
      const mediaExistente = await this.buscarPorId(media_disciplina_bimestre_id);
      if (!mediaExistente) {
        throw new Error('M√©dia n√£o encontrada');
      }

      const deletado = await MediaDisciplinaBimestreModel.deletar(media_disciplina_bimestre_id);
      if (!deletado) {
        throw new Error('Erro ao deletar m√©dia');
      }

      logger.info(`‚úÖ M√©dia deletada com sucesso: ID ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre');
    } catch (error) {
      logger.error(`‚ùå Erro ao deletar m√©dia: ${media_disciplina_bimestre_id}`, 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Obter estat√≠sticas por aluno
  static async obterEstatisticasPorAluno(aluno_id: string): Promise<any> {
    try {
      logger.info(`üìä Obtendo estat√≠sticas do aluno ${aluno_id}`, 'media-disciplina-bimestre');
      
      if (!aluno_id?.trim()) {
        throw new Error('ID do aluno √© obrigat√≥rio');
      }

      const stats = await MediaDisciplinaBimestreModel.obterEstatisticasPorAluno(aluno_id);
      logger.info(`‚úÖ Estat√≠sticas obtidas para o aluno`, 'media-disciplina-bimestre');
      
      return stats;
    } catch (error) {
      logger.error('‚ùå Erro ao obter estat√≠sticas por aluno', 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Obter estat√≠sticas por turma e disciplina
  static async obterEstatisticasPorTurmaDisciplina(
    turma_id: string,
    disciplina_id: string,
    periodo_letivo_id?: string
  ): Promise<any> {
    try {
      const logMessage = periodo_letivo_id 
        ? `üìä Obtendo estat√≠sticas da turma ${turma_id}, disciplina ${disciplina_id} no per√≠odo ${periodo_letivo_id}`
        : `üìä Obtendo estat√≠sticas da turma ${turma_id}, disciplina ${disciplina_id}`;
      
      logger.info(logMessage, 'media-disciplina-bimestre');
      
      if (!turma_id?.trim()) {
        throw new Error('ID da turma √© obrigat√≥rio');
      }
      
      if (!disciplina_id?.trim()) {
        throw new Error('ID da disciplina √© obrigat√≥rio');
      }

      const stats = await MediaDisciplinaBimestreModel.obterEstatisticasPorTurmaDisciplina(
        turma_id,
        disciplina_id,
        periodo_letivo_id
      );
      logger.info(`‚úÖ Estat√≠sticas obtidas para a turma e disciplina`, 'media-disciplina-bimestre');
      
      return stats;
    } catch (error) {
      logger.error('‚ùå Erro ao obter estat√≠sticas por turma e disciplina', 'media-disciplina-bimestre', error);
      throw error;
    }
  }

  // Validar dados da m√©dia
  private static async validarDadosMedia(
    dados: Partial<Omit<MediaDisciplinaBimestre, 'media_disciplina_bimestre_id' | 'created_at' | 'updated_at'>>,
    isUpdate: boolean = false
  ): Promise<void> {
    const errors: string[] = [];

    // Valida√ß√£o de campos obrigat√≥rios para cria√ß√£o
    if (!isUpdate) {
      if (!dados.matricula_aluno_id?.trim()) {
        errors.push('ID da matr√≠cula √© obrigat√≥rio');
      }
      if (!dados.turma_disciplina_professor_id?.trim()) {
        errors.push('ID da turma-disciplina-professor √© obrigat√≥rio');
      }
      if (!dados.periodo_letivo_id?.trim()) {
        errors.push('ID do per√≠odo letivo √© obrigat√≥rio');
      }
      if (dados.valor_media === undefined || dados.valor_media === null) {
        errors.push('Valor da m√©dia √© obrigat√≥rio');
      }
      if (!dados.origem?.trim()) {
        errors.push('Origem da m√©dia √© obrigat√≥ria');
      }
    }

    // Valida√ß√£o da m√©dia
    if (dados.valor_media !== undefined && dados.valor_media !== null) {
      if (typeof dados.valor_media !== 'number' || isNaN(dados.valor_media)) {
        errors.push('Valor da m√©dia deve ser um n√∫mero v√°lido');
      } else if (dados.valor_media < 0 || dados.valor_media > 10) {
        errors.push('Valor da m√©dia deve estar entre 0 e 10');
      }
    }

    // Valida√ß√£o da origem
    if (dados.origem && !['manual', 'calculada'].includes(dados.origem)) {
      errors.push('Origem deve ser "manual" ou "calculada"');
    }

    // Valida√ß√µes de integridade referencial
    if (dados.matricula_aluno_id) {
      const matriculaValida = await MediaDisciplinaBimestreModel.verificarMatriculaValida(dados.matricula_aluno_id);
      if (!matriculaValida) {
        errors.push('Matr√≠cula n√£o encontrada');
      }
    }

    if (dados.turma_disciplina_professor_id) {
      const turmaDisciplinaProfessorValida = await MediaDisciplinaBimestreModel.verificarTurmaDisciplinaProfessorValida(dados.turma_disciplina_professor_id);
      if (!turmaDisciplinaProfessorValida) {
        errors.push('Turma-disciplina-professor n√£o encontrada');
      }
    }

    if (dados.periodo_letivo_id) {
      const periodoValido = await MediaDisciplinaBimestreModel.verificarPeriodoLetivoValido(dados.periodo_letivo_id);
      if (!periodoValido) {
        errors.push('Per√≠odo letivo n√£o encontrado');
      }
    }

    if (errors.length > 0) {
      throw new Error(errors.join(', '));
    }
  }
}

export default MediaDisciplinaBimestreService;
