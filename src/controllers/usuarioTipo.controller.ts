import { Request, Response } from 'express';
import * as UsuarioTipoModel from '../model/usuarioTipo.model';
import { logError, logSuccess, logInfo } from '../utils/logger';

export class UsuarioTipoController {
  // üìã LISTAR TODOS OS TIPOS DE USU√ÅRIO
  static async listarTiposUsuario(req: Request, res: Response) {
    try {
      logInfo('üìã Listando todos os tipos de usu√°rio...', 'controller');
      
      const tipos = await UsuarioTipoModel.listarTodos();
      
      logSuccess(`‚úÖ ${tipos.length} tipos de usu√°rio encontrados`, 'controller', { total: tipos.length });
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Tipos de usu√°rio listados com sucesso',
        dados: tipos
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao listar tipos de usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }

  // üîç BUSCAR TIPO DE USU√ÅRIO POR ID
  static async buscarTipoUsuarioPorId(req: Request, res: Response) {
    try {
      const { id } = req.params;
      
      if (!id) {
        logError('‚ùå ID do tipo de usu√°rio n√£o fornecido', 'controller');
        return res.status(400).json({
          status: 'erro',
          mensagem: 'ID do tipo de usu√°rio √© obrigat√≥rio'
        });
      }

      logInfo(`üîç Buscando tipo de usu√°rio: ${id}`, 'controller');
      
      const tipo = await UsuarioTipoModel.buscarPorId(id);
      
      if (!tipo) {
        logError(`‚ùå Tipo de usu√°rio n√£o encontrado: ${id}`, 'controller');
        return res.status(404).json({
          status: 'erro',
          mensagem: 'Tipo de usu√°rio n√£o encontrado'
        });
      }

      logSuccess(`‚úÖ Tipo de usu√°rio encontrado: ${tipo.nome_tipo}`, 'controller');
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Tipo de usu√°rio encontrado com sucesso',
        dados: tipo
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao buscar tipo de usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }

  // ‚ûï CRIAR TIPO DE USU√ÅRIO
  static async criarTipoUsuario(req: Request, res: Response) {
    try {
      const { nome_tipo } = req.body;
      
      // Valida√ß√£o dos campos obrigat√≥rios
      if (!nome_tipo) {
        logError('‚ùå Nome do tipo n√£o fornecido', 'controller');
        return res.status(400).json({
          status: 'erro',
          mensagem: 'Nome do tipo √© obrigat√≥rio'
        });
      }

      // Valida√ß√£o do formato do nome
      if (!/^[a-z_]+$/.test(nome_tipo)) {
        logError('‚ùå Nome do tipo inv√°lido', 'controller', { nome_tipo });
        return res.status(400).json({
          status: 'erro',
          mensagem: 'Nome do tipo deve conter apenas letras min√∫sculas e underscore'
        });
      }

      // Verificar se o tipo j√° existe
      const tipoExistente = await UsuarioTipoModel.buscarPorNome(nome_tipo);
      if (tipoExistente) {
        logError(`‚ùå Tipo de usu√°rio j√° existe: ${nome_tipo}`, 'controller');
        return res.status(409).json({
          status: 'erro',
          mensagem: 'Tipo de usu√°rio j√° existe'
        });
      }

      logInfo(`‚ûï Criando tipo de usu√°rio: ${nome_tipo}`, 'controller');
      
      const novoTipo = await UsuarioTipoModel.criar({
        nome_tipo
      });
      
      if (!novoTipo) {
        logError(`‚ùå Falha ao criar tipo de usu√°rio: ${nome_tipo}`, 'controller');
        return res.status(500).json({
          status: 'erro',
          mensagem: 'Falha ao criar tipo de usu√°rio'
        });
      }

      logSuccess(`‚úÖ Tipo de usu√°rio criado: ${novoTipo.nome_tipo}`, 'controller');
      
      return res.status(201).json({
        status: 'sucesso',
        mensagem: 'Tipo de usu√°rio criado com sucesso',
        dados: novoTipo
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao criar tipo de usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }

  // ‚úèÔ∏è ATUALIZAR TIPO DE USU√ÅRIO
  static async atualizarTipoUsuario(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const { nome_tipo } = req.body;
      
      if (!id) {
        logError('‚ùå ID do tipo de usu√°rio n√£o fornecido', 'controller');
        return res.status(400).json({
          status: 'erro',
          mensagem: 'ID do tipo de usu√°rio √© obrigat√≥rio'
        });
      }

      // Verificar se o tipo existe
      const tipoExistente = await UsuarioTipoModel.buscarPorId(id);
      if (!tipoExistente) {
        logError(`‚ùå Tipo de usu√°rio n√£o encontrado: ${id}`, 'controller');
        return res.status(404).json({
          status: 'erro',
          mensagem: 'Tipo de usu√°rio n√£o encontrado'
        });
      }

      // Valida√ß√£o do formato do nome (se fornecido)
      if (nome_tipo && !/^[a-z_]+$/.test(nome_tipo)) {
        logError('‚ùå Nome do tipo inv√°lido', 'controller', { nome_tipo });
        return res.status(400).json({
          status: 'erro',
          mensagem: 'Nome do tipo deve conter apenas letras min√∫sculas e underscore'
        });
      }

      // Verificar se o novo nome j√° existe (se diferente do atual)
      if (nome_tipo && nome_tipo !== tipoExistente.nome_tipo) {
        const tipoComNome = await UsuarioTipoModel.buscarPorNome(nome_tipo);
        if (tipoComNome) {
          logError(`‚ùå Nome do tipo j√° existe: ${nome_tipo}`, 'controller');
          return res.status(409).json({
            status: 'erro',
            mensagem: 'Nome do tipo j√° existe'
          });
        }
      }

      logInfo(`‚úèÔ∏è Atualizando tipo de usu√°rio: ${id}`, 'controller');
      
      const dadosAtualizacao: any = {};
      if (nome_tipo) dadosAtualizacao.nome_tipo = nome_tipo;

      const tipoAtualizado = await UsuarioTipoModel.atualizar(id, dadosAtualizacao);
      
      if (!tipoAtualizado) {
        logError(`‚ùå Falha ao atualizar tipo de usu√°rio: ${id}`, 'controller');
        return res.status(500).json({
          status: 'erro',
          mensagem: 'Falha ao atualizar tipo de usu√°rio'
        });
      }

      logSuccess(`‚úÖ Tipo de usu√°rio atualizado: ${tipoAtualizado.nome_tipo}`, 'controller');
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Tipo de usu√°rio atualizado com sucesso',
        dados: tipoAtualizado
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao atualizar tipo de usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }

  // üóëÔ∏è EXCLUIR TIPO DE USU√ÅRIO
  static async excluirTipoUsuario(req: Request, res: Response) {
    try {
      const { id } = req.params;
      
      if (!id) {
        logError('‚ùå ID do tipo de usu√°rio n√£o fornecido', 'controller');
        return res.status(400).json({
          status: 'erro',
          mensagem: 'ID do tipo de usu√°rio √© obrigat√≥rio'
        });
      }

      // Verificar se o tipo existe
      const tipoExistente = await UsuarioTipoModel.buscarPorId(id);
      if (!tipoExistente) {
        logError(`‚ùå Tipo de usu√°rio n√£o encontrado: ${id}`, 'controller');
        return res.status(404).json({
          status: 'erro',
          mensagem: 'Tipo de usu√°rio n√£o encontrado'
        });
      }

      // TODO: Verificar se h√° usu√°rios usando este tipo antes de excluir
      // const usuariosComTipo = await UsuarioModel.buscarPorTipo(id);
      // if (usuariosComTipo.length > 0) {
      //   return res.status(409).json({
      //     status: 'erro',
      //     mensagem: 'N√£o √© poss√≠vel excluir tipo que est√° sendo usado por usu√°rios'
      //   });
      // }

      logInfo(`üóëÔ∏è Excluindo tipo de usu√°rio: ${id}`, 'controller');
      
      const sucesso = await UsuarioTipoModel.deletar(id);
      
      if (!sucesso) {
        logError(`‚ùå Falha ao excluir tipo de usu√°rio: ${id}`, 'controller');
        return res.status(500).json({
          status: 'erro',
          mensagem: 'Falha ao excluir tipo de usu√°rio'
        });
      }

      logSuccess(`‚úÖ Tipo de usu√°rio exclu√≠do: ${tipoExistente.nome_tipo}`, 'controller');
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Tipo de usu√°rio exclu√≠do com sucesso'
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao excluir tipo de usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }
}

export default UsuarioTipoController;