import { Request, Response } from 'express';
import * as UsuarioModel from '../model/usuario.model';
import { logError, logSuccess, logInfo } from '../utils/logger';

export class UsuarioController {
  // üìã LISTAR TODOS OS USU√ÅRIOS
  static async listarUsuarios(req: Request, res: Response) {
    try {
      const { tipo } = req.query;
      
      // Se foi passado filtro de tipo, buscar por tipo
      if (tipo && typeof tipo === 'string') {
        logInfo(`üìã Listando usu√°rios do tipo: ${tipo}`, 'controller');
        
        const usuarios = await UsuarioModel.listarPorTipo(tipo);
        
        logSuccess(`‚úÖ ${usuarios.length} usu√°rios do tipo "${tipo}" encontrados`, 'controller', { total: usuarios.length });
        
        return res.status(200).json({
          status: 'sucesso',
          mensagem: `Usu√°rios do tipo "${tipo}" listados com sucesso`,
          usuarios: usuarios,
          total: usuarios.length
        });
      }
      
      // Caso contr√°rio, listar todos
      logInfo('üìã Listando todos os usu√°rios...', 'controller');
      
      const usuarios = await UsuarioModel.listarTodos();
      
      logSuccess(`‚úÖ ${usuarios.length} usu√°rios encontrados`, 'controller', { total: usuarios.length });
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Usu√°rios listados com sucesso',
        usuarios: usuarios,
        total: usuarios.length
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao listar usu√°rios: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }

  // üîç BUSCAR USU√ÅRIO POR ID
  static async buscarUsuarioPorId(req: Request, res: Response) {
    try {
      const { id } = req.params;
      
      if (!id) {
        logError('‚ùå ID do usu√°rio n√£o fornecido', 'controller');
        return res.status(400).json({
          status: 'erro',
          mensagem: 'ID do usu√°rio √© obrigat√≥rio'
        });
      }

      logInfo(`üîç Buscando usu√°rio: ${id}`, 'controller');
      
      const usuario = await UsuarioModel.buscarPorId(id);
      
      if (!usuario) {
        logError(`‚ùå Usu√°rio n√£o encontrado: ${id}`, 'controller');
        return res.status(404).json({
          status: 'erro',
          mensagem: 'Usu√°rio n√£o encontrado'
        });
      }

      logSuccess(`‚úÖ Usu√°rio encontrado: ${usuario.nome_usuario}`, 'controller');
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Usu√°rio encontrado com sucesso',
        usuario: usuario
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao buscar usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }

  // ‚úèÔ∏è ATUALIZAR USU√ÅRIO
  static async atualizarUsuario(req: Request, res: Response) {
    try {
      const { id } = req.params;
      const { nome_usuario, email_usuario, tipo_usuario_id } = req.body;
      
      if (!id) {
        logError('‚ùå ID do usu√°rio n√£o fornecido', 'controller');
        return res.status(400).json({
          status: 'erro',
          mensagem: 'ID do usu√°rio √© obrigat√≥rio'
        });
      }

      // Verificar se o usu√°rio existe
      const usuarioExistente = await UsuarioModel.buscarPorId(id);
      if (!usuarioExistente) {
        logError(`‚ùå Usu√°rio n√£o encontrado: ${id}`, 'controller');
        return res.status(404).json({
          status: 'erro',
          mensagem: 'Usu√°rio n√£o encontrado'
        });
      }

      // Verificar se o email j√° existe em outro usu√°rio
      if (email_usuario && email_usuario !== usuarioExistente.email_usuario) {
        const usuarioComEmail = await UsuarioModel.buscarPorEmail(email_usuario);
        if (usuarioComEmail && usuarioComEmail.usuario_id !== id) {
          logError(`‚ùå Email j√° cadastrado: ${email_usuario}`, 'controller');
          return res.status(409).json({
            status: 'erro',
            mensagem: 'Email j√° cadastrado por outro usu√°rio'
          });
        }
      }

      logInfo(`‚úèÔ∏è Atualizando usu√°rio: ${id}`, 'controller');
      
      const dadosAtualizacao: any = {};
      if (nome_usuario) dadosAtualizacao.nome_usuario = nome_usuario;
      if (email_usuario) dadosAtualizacao.email_usuario = email_usuario;
      if (tipo_usuario_id) dadosAtualizacao.tipo_usuario_id = tipo_usuario_id;

      const usuarioAtualizado = await UsuarioModel.atualizar(id, dadosAtualizacao);
      
      if (!usuarioAtualizado) {
        logError(`‚ùå Falha ao atualizar usu√°rio: ${id}`, 'controller');
        return res.status(500).json({
          status: 'erro',
          mensagem: 'Falha ao atualizar usu√°rio'
        });
      }

      logSuccess(`‚úÖ Usu√°rio atualizado: ${usuarioAtualizado.nome_usuario}`, 'controller');
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Usu√°rio atualizado com sucesso',
        usuario: usuarioAtualizado
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao atualizar usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }

  // üóëÔ∏è EXCLUIR USU√ÅRIO
  static async excluirUsuario(req: Request, res: Response) {
    try {
      const { id } = req.params;
      
      if (!id) {
        logError('‚ùå ID do usu√°rio n√£o fornecido', 'controller');
        return res.status(400).json({
          status: 'erro',
          mensagem: 'ID do usu√°rio √© obrigat√≥rio'
        });
      }

      // Verificar se o usu√°rio existe
      const usuarioExistente = await UsuarioModel.buscarPorId(id);
      if (!usuarioExistente) {
        logError(`‚ùå Usu√°rio n√£o encontrado: ${id}`, 'controller');
        return res.status(404).json({
          status: 'erro',
          mensagem: 'Usu√°rio n√£o encontrado'
        });
      }

      logInfo(`üóëÔ∏è Excluindo usu√°rio: ${id}`, 'controller');
      
      const sucesso = await UsuarioModel.deletar(id);
      
      if (!sucesso) {
        logError(`‚ùå Falha ao excluir usu√°rio: ${id}`, 'controller');
        return res.status(500).json({
          status: 'erro',
          mensagem: 'Falha ao excluir usu√°rio'
        });
      }

      logSuccess(`‚úÖ Usu√°rio exclu√≠do: ${usuarioExistente.nome_usuario}`, 'controller');
      
      return res.status(200).json({
        status: 'sucesso',
        mensagem: 'Usu√°rio exclu√≠do com sucesso'
      });
    } catch (error: any) {
      logError(`‚ùå Erro ao excluir usu√°rio: ${error.message}`, 'controller', error);
      return res.status(500).json({
        status: 'erro',
        mensagem: 'Erro interno do servidor',
        detalhes: error.message
      });
    }
  }
}

export default UsuarioController;
