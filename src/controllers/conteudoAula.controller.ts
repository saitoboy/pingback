import { Request, Response } from 'express';
import ConteudoAulaService from '../services/conteudoAula.service';
import { TipoUsuario } from '../types/models';
import '../middleware/auth.middleware'; // Importa para carregar a extens√£o global
import logger from '../utils/logger';

class ConteudoAulaController {

  /**
   * Listar todos os conte√∫dos de aula
   * GET /conteudo-aula
   */
  static async listarConteudos(req: Request, res: Response): Promise<void> {
    try {
      logger.info('üìö Requisi√ß√£o para listar conte√∫dos de aula', 'conteudo-aula');
      
      const conteudos = await ConteudoAulaService.listarConteudos();

      res.status(200).json({
        sucesso: true,
        mensagem: 'Lista de conte√∫dos de aula obtida com sucesso',
        dados: conteudos,
        total: conteudos.length
      });
    } catch (error) {
      logger.error('‚ùå Erro no controller ao listar conte√∫dos', 'conteudo-aula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  /**
   * Buscar conte√∫do por ID
   * GET /conteudo-aula/:id
   */
  static async buscarConteudoPorId(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      
      if (!id || !id.trim()) {
        res.status(400).json({
          sucesso: false,
          mensagem: 'ID do conte√∫do √© obrigat√≥rio'
        });
        return;
      }

      logger.info(`üîç Requisi√ß√£o para buscar conte√∫do: ${id}`, 'conteudo-aula');
      
      const conteudo = await ConteudoAulaService.buscarConteudoPorId(id);

      res.status(200).json({
        sucesso: true,
        mensagem: 'Conte√∫do de aula encontrado com sucesso',
        dados: conteudo
      });
    } catch (error) {
      logger.error('‚ùå Erro no controller ao buscar conte√∫do', 'conteudo-aula', error);
      const statusCode = error instanceof Error && error.message.includes('n√£o encontrado') ? 404 : 500;
      res.status(statusCode).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  /**
   * Buscar conte√∫dos por aula
   * GET /conteudo-aula/aula/:aula_id
   */
  static async buscarConteudosPorAula(req: Request, res: Response): Promise<void> {
    try {
      const { aula_id } = req.params;
      
      if (!aula_id || !aula_id.trim()) {
        res.status(400).json({
          sucesso: false,
          mensagem: 'ID da aula √© obrigat√≥rio'
        });
        return;
      }

      logger.info(`üîç Requisi√ß√£o para buscar conte√∫dos da aula: ${aula_id}`, 'conteudo-aula');
      
      const conteudos = await ConteudoAulaService.buscarConteudosPorAula(aula_id);

      res.status(200).json({
        sucesso: true,
        mensagem: 'Conte√∫dos da aula encontrados com sucesso',
        dados: conteudos,
        total: conteudos.length
      });
    } catch (error) {
      logger.error('‚ùå Erro no controller ao buscar conte√∫dos por aula', 'conteudo-aula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  /**
   * Criar novo conte√∫do de aula
   * POST /conteudo-aula
   */
  static async criarConteudo(req: Request, res: Response): Promise<void> {
    try {
      const { aula_id, descricao, conteudo } = req.body;

      if (!aula_id || !descricao || !conteudo) {
        res.status(400).json({
          sucesso: false,
          mensagem: 'ID da aula, descri√ß√£o e conte√∫do s√£o obrigat√≥rios'
        });
        return;
      }

      logger.info(`üìù Requisi√ß√£o para criar conte√∫do: ${descricao}`, 'conteudo-aula');

      const novoConteudo = await ConteudoAulaService.criarConteudo({
        aula_id,
        descricao,
        conteudo
      });

      res.status(201).json({
        sucesso: true,
        mensagem: 'Conte√∫do de aula criado com sucesso',
        dados: novoConteudo
      });
    } catch (error) {
      logger.error('‚ùå Erro no controller ao criar conte√∫do', 'conteudo-aula', error);
      const statusCode = error instanceof Error && 
        (error.message.includes('obrigat√≥rio') || 
         error.message.includes('caracteres') ||
         error.message.includes('n√£o encontrada')) ? 400 : 500;
      
      res.status(statusCode).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  /**
   * Atualizar conte√∫do de aula
   * PUT /conteudo-aula/:id
   */
  static async atualizarConteudo(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const { descricao, conteudo } = req.body;
      const usuario = req.usuario!;

      if (!id || !id.trim()) {
        res.status(400).json({
          sucesso: false,
          mensagem: 'ID do conte√∫do √© obrigat√≥rio'
        });
        return;
      }

      if (!descricao && !conteudo) {
        res.status(400).json({
          sucesso: false,
          mensagem: 'Pelo menos um campo (descri√ß√£o ou conte√∫do) deve ser fornecido'
        });
        return;
      }

      logger.info(`üìù Requisi√ß√£o para atualizar conte√∫do: ${id}`, 'conteudo-aula');

      // Se for professor, verificar se tem acesso ao conte√∫do
      if (usuario.tipo_usuario_id === TipoUsuario.PROFESSOR) {
        const temAcesso = await ConteudoAulaService.verificarAcessoProfessor(id, usuario.usuario_id);
        
        if (!temAcesso) {
          logger.warning(`‚ö†Ô∏è Professor ${usuario.usuario_id} tentou atualizar conte√∫do ${id} sem permiss√£o`, 'conteudo-aula');
          res.status(403).json({
            sucesso: false,
            mensagem: 'Voc√™ s√≥ pode atualizar conte√∫dos de suas pr√≥prias aulas'
          });
          return;
        }
      }

      const conteudoAtualizado = await ConteudoAulaService.atualizarConteudo(id, {
        descricao,
        conteudo
      });

      res.status(200).json({
        sucesso: true,
        mensagem: 'Conte√∫do de aula atualizado com sucesso',
        dados: conteudoAtualizado
      });
    } catch (error) {
      logger.error('‚ùå Erro no controller ao atualizar conte√∫do', 'conteudo-aula', error);
      const statusCode = error instanceof Error && 
        (error.message.includes('n√£o encontrado') || 
         error.message.includes('obrigat√≥rio') ||
         error.message.includes('caracteres')) ? 404 : 500;
      
      res.status(statusCode).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  /**
   * Deletar conte√∫do de aula
   * DELETE /conteudo-aula/:id
   */
  static async deletarConteudo(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const usuario = req.usuario!;

      if (!id || !id.trim()) {
        res.status(400).json({
          sucesso: false,
          mensagem: 'ID do conte√∫do √© obrigat√≥rio'
        });
        return;
      }

      logger.info(`üóëÔ∏è Requisi√ß√£o para deletar conte√∫do: ${id}`, 'conteudo-aula');

      // Se for professor, verificar se tem acesso ao conte√∫do
      if (usuario.tipo_usuario_id === TipoUsuario.PROFESSOR) {
        const temAcesso = await ConteudoAulaService.verificarAcessoProfessor(id, usuario.usuario_id);
        
        if (!temAcesso) {
          logger.warning(`‚ö†Ô∏è Professor ${usuario.usuario_id} tentou deletar conte√∫do ${id} sem permiss√£o`, 'conteudo-aula');
          res.status(403).json({
            sucesso: false,
            mensagem: 'Voc√™ s√≥ pode deletar conte√∫dos de suas pr√≥prias aulas'
          });
          return;
        }
      }

      await ConteudoAulaService.deletarConteudo(id);

      res.status(200).json({
        sucesso: true,
        mensagem: 'Conte√∫do de aula deletado com sucesso'
      });
    } catch (error) {
      logger.error('‚ùå Erro no controller ao deletar conte√∫do', 'conteudo-aula', error);
      const statusCode = error instanceof Error && error.message.includes('n√£o encontrado') ? 404 : 500;
      res.status(statusCode).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }
}

export default ConteudoAulaController;
