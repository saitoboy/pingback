import { Request, Response } from 'express';
import MatriculaAlunoService from '../services/matriculaAluno.service';
import logger from '../utils/logger';

class MatriculaAlunoController {

  // Listar todas as matr√≠culas
  static async listarMatriculas(req: Request, res: Response): Promise<void> {
    try {
      logger.info('üìã Iniciando listagem de matr√≠culas', 'matricula');
      
      const matriculas = await MatriculaAlunoService.listarMatriculas();
      
      logger.success(`üìã ${matriculas.length} matr√≠culas encontradas`, 'matricula');
      res.status(200).json({
        sucesso: true,
        dados: matriculas,
        total: matriculas.length
      });
    } catch (error) {
      logger.error('‚ùå Erro ao listar matr√≠culas', 'matricula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor ao listar matr√≠culas'
      });
    }
  }

  // Buscar matr√≠cula por ID
  static async buscarMatriculaPorId(req: Request, res: Response): Promise<void> {
    try {
      const { matricula_aluno_id } = req.params;
      
      logger.info(`üîç Buscando matr√≠cula por ID: ${matricula_aluno_id}`, 'matricula');
      
      const matricula = await MatriculaAlunoService.buscarMatriculaPorId(matricula_aluno_id);
      
      if (!matricula) {
        logger.warning(`‚ö†Ô∏è Matr√≠cula n√£o encontrada: ${matricula_aluno_id}`, 'matricula');
        res.status(404).json({
          sucesso: false,
          mensagem: 'Matr√≠cula n√£o encontrada'
        });
        return;
      }
      
      logger.success(`‚úÖ Matr√≠cula encontrada: ${matricula_aluno_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        dados: matricula
      });
    } catch (error) {
      logger.error('‚ùå Erro ao buscar matr√≠cula por ID', 'matricula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Buscar matr√≠culas por aluno
  static async buscarMatriculasPorAluno(req: Request, res: Response): Promise<void> {
    try {
      const { aluno_id } = req.params;
      
      logger.info(`üîç Buscando matr√≠culas do aluno: ${aluno_id}`, 'matricula');
      
      const matriculas = await MatriculaAlunoService.buscarMatriculasPorAluno(aluno_id);
      
      logger.success(`‚úÖ ${matriculas.length} matr√≠culas encontradas para o aluno: ${aluno_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        dados: matriculas,
        total: matriculas.length
      });
    } catch (error) {
      logger.error('‚ùå Erro ao buscar matr√≠culas por aluno', 'matricula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Buscar matr√≠culas por turma
  static async buscarMatriculasPorTurma(req: Request, res: Response): Promise<void> {
    try {
      const { turma_id } = req.params;
      
      logger.info(`üîç Buscando matr√≠culas da turma: ${turma_id}`, 'matricula');
      
      const matriculas = await MatriculaAlunoService.buscarMatriculasPorTurma(turma_id);
      
      logger.success(`‚úÖ ${matriculas.length} matr√≠culas encontradas para a turma: ${turma_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        dados: matriculas,
        total: matriculas.length
      });
    } catch (error) {
      logger.error('‚ùå Erro ao buscar matr√≠culas por turma', 'matricula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Buscar matr√≠culas por ano letivo
  static async buscarMatriculasPorAnoLetivo(req: Request, res: Response): Promise<void> {
    try {
      const { ano_letivo_id } = req.params;
      
      logger.info(`üîç Buscando matr√≠culas do ano letivo: ${ano_letivo_id}`, 'matricula');
      
      const matriculas = await MatriculaAlunoService.buscarMatriculasPorAnoLetivo(ano_letivo_id);
      
      logger.success(`‚úÖ ${matriculas.length} matr√≠culas encontradas para o ano letivo: ${ano_letivo_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        dados: matriculas,
        total: matriculas.length
      });
    } catch (error) {
      logger.error('‚ùå Erro ao buscar matr√≠culas por ano letivo', 'matricula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Buscar matr√≠culas por status
  static async buscarMatriculasPorStatus(req: Request, res: Response): Promise<void> {
    try {
      const { status } = req.params;
      
      logger.info(`üîç Buscando matr√≠culas com status: ${status}`, 'matricula');
      
      const matriculas = await MatriculaAlunoService.buscarMatriculasPorStatus(status);
      
      logger.success(`‚úÖ ${matriculas.length} matr√≠culas encontradas com status: ${status}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        dados: matriculas,
        total: matriculas.length
      });
    } catch (error) {
      logger.error('‚ùå Erro ao buscar matr√≠culas por status', 'matricula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Buscar matr√≠cula ativa do aluno
  static async buscarMatriculaAtivaAluno(req: Request, res: Response): Promise<void> {
    try {
      const { aluno_id, ano_letivo_id } = req.params;
      
      logger.info(`üîç Buscando matr√≠cula ativa do aluno: ${aluno_id} no ano: ${ano_letivo_id}`, 'matricula');
      
      const matricula = await MatriculaAlunoService.buscarMatriculaAtivaAluno(aluno_id, ano_letivo_id);
      
      if (!matricula) {
        logger.warning(`‚ö†Ô∏è Nenhuma matr√≠cula ativa encontrada para aluno: ${aluno_id} no ano: ${ano_letivo_id}`, 'matricula');
        res.status(404).json({
          sucesso: false,
          mensagem: 'Nenhuma matr√≠cula ativa encontrada para este aluno no ano letivo especificado'
        });
        return;
      }
      
      logger.success(`‚úÖ Matr√≠cula ativa encontrada para aluno: ${aluno_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        dados: matricula
      });
    } catch (error) {
      logger.error('‚ùå Erro ao buscar matr√≠cula ativa do aluno', 'matricula', error);
      res.status(500).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Criar matr√≠cula
  static async criarMatricula(req: Request, res: Response): Promise<void> {
    try {
      const dadosMatricula = req.body;
      
      logger.info(`‚ûï Criando nova matr√≠cula para aluno: ${dadosMatricula.aluno_id}`, 'matricula');
      
      const novaMatricula = await MatriculaAlunoService.criarMatricula(dadosMatricula);
      
      logger.success(`‚úÖ Matr√≠cula criada com sucesso: ${novaMatricula.matricula_aluno_id}`, 'matricula');
      res.status(201).json({
        sucesso: true,
        mensagem: 'Matr√≠cula criada com sucesso',
        dados: novaMatricula
      });
    } catch (error) {
      logger.error('‚ùå Erro ao criar matr√≠cula', 'matricula', error);
      res.status(400).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Atualizar matr√≠cula
  static async atualizarMatricula(req: Request, res: Response): Promise<void> {
    try {
      const { matricula_aluno_id } = req.params;
      const dadosAtualizacao = req.body;
      
      logger.info(`‚úèÔ∏è Atualizando matr√≠cula: ${matricula_aluno_id}`, 'matricula');
      
      const matriculaAtualizada = await MatriculaAlunoService.atualizarMatricula(matricula_aluno_id, dadosAtualizacao);
      
      if (!matriculaAtualizada) {
        logger.warning(`‚ö†Ô∏è Matr√≠cula n√£o encontrada para atualiza√ß√£o: ${matricula_aluno_id}`, 'matricula');
        res.status(404).json({
          sucesso: false,
          mensagem: 'Matr√≠cula n√£o encontrada'
        });
        return;
      }
      
      logger.success(`‚úÖ Matr√≠cula atualizada com sucesso: ${matricula_aluno_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        mensagem: 'Matr√≠cula atualizada com sucesso',
        dados: matriculaAtualizada
      });
    } catch (error) {
      logger.error('‚ùå Erro ao atualizar matr√≠cula', 'matricula', error);
      res.status(400).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Deletar matr√≠cula
  static async deletarMatricula(req: Request, res: Response): Promise<void> {
    try {
      const { matricula_aluno_id } = req.params;
      
      logger.info(`üóëÔ∏è Deletando matr√≠cula: ${matricula_aluno_id}`, 'matricula');
      
      const sucesso = await MatriculaAlunoService.deletarMatricula(matricula_aluno_id);
      
      if (!sucesso) {
        logger.warning(`‚ö†Ô∏è Matr√≠cula n√£o encontrada para dele√ß√£o: ${matricula_aluno_id}`, 'matricula');
        res.status(404).json({
          sucesso: false,
          mensagem: 'Matr√≠cula n√£o encontrada'
        });
        return;
      }
      
      logger.success(`‚úÖ Matr√≠cula deletada com sucesso: ${matricula_aluno_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        mensagem: 'Matr√≠cula deletada com sucesso'
      });
    } catch (error) {
      logger.error('‚ùå Erro ao deletar matr√≠cula', 'matricula', error);
      res.status(400).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Transferir aluno de turma
  static async transferirAluno(req: Request, res: Response): Promise<void> {
    try {
      const { matricula_aluno_id } = req.params;
      const { nova_turma_id, motivo } = req.body;
      
      logger.info(`üîÑ Transferindo aluno da matr√≠cula: ${matricula_aluno_id} para turma: ${nova_turma_id}`, 'matricula');
      
      const matriculaAtualizada = await MatriculaAlunoService.transferirAluno(matricula_aluno_id, nova_turma_id, motivo);
      
      if (!matriculaAtualizada) {
        logger.warning(`‚ö†Ô∏è Matr√≠cula n√£o encontrada para transfer√™ncia: ${matricula_aluno_id}`, 'matricula');
        res.status(404).json({
          sucesso: false,
          mensagem: 'Matr√≠cula n√£o encontrada'
        });
        return;
      }
      
      logger.success(`‚úÖ Aluno transferido com sucesso: ${matricula_aluno_id}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        mensagem: 'Aluno transferido com sucesso',
        dados: matriculaAtualizada
      });
    } catch (error) {
      logger.error('‚ùå Erro ao transferir aluno', 'matricula', error);
      res.status(400).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }

  // Finalizar matr√≠cula (concluir ou cancelar)
  static async finalizarMatricula(req: Request, res: Response): Promise<void> {
    try {
      const { matricula_aluno_id } = req.params;
      const { status, motivo } = req.body;
      
      // Validar status
      if (!['concluido', 'cancelado'].includes(status)) {
        logger.warning(`‚ö†Ô∏è Status inv√°lido para finaliza√ß√£o: ${status}`, 'matricula');
        res.status(400).json({
          sucesso: false,
          mensagem: 'Status deve ser "concluido" ou "cancelado"'
        });
        return;
      }
      
      if (!motivo?.trim()) {
        logger.warning(`‚ö†Ô∏è Motivo √© obrigat√≥rio para finaliza√ß√£o da matr√≠cula: ${matricula_aluno_id}`, 'matricula');
        res.status(400).json({
          sucesso: false,
          mensagem: 'Motivo √© obrigat√≥rio para finalizar a matr√≠cula'
        });
        return;
      }
      
      logger.info(`üèÅ Finalizando matr√≠cula: ${matricula_aluno_id} com status: ${status}`, 'matricula');
      
      const matriculaFinalizada = await MatriculaAlunoService.finalizarMatricula(matricula_aluno_id, status, motivo);
      
      if (!matriculaFinalizada) {
        logger.warning(`‚ö†Ô∏è Matr√≠cula n√£o encontrada para finaliza√ß√£o: ${matricula_aluno_id}`, 'matricula');
        res.status(404).json({
          sucesso: false,
          mensagem: 'Matr√≠cula n√£o encontrada'
        });
        return;
      }
      
      logger.success(`‚úÖ Matr√≠cula finalizada com sucesso: ${matricula_aluno_id} - Status: ${status}`, 'matricula');
      res.status(200).json({
        sucesso: true,
        mensagem: `Matr√≠cula ${status} com sucesso`,
        dados: matriculaFinalizada
      });
    } catch (error) {
      logger.error('‚ùå Erro ao finalizar matr√≠cula', 'matricula', error);
      res.status(400).json({
        sucesso: false,
        mensagem: error instanceof Error ? error.message : 'Erro interno do servidor'
      });
    }
  }
}

export default MatriculaAlunoController;
