import { Request, Response } from 'express';
import SerieService from '../services/serie.service';
import { logInfo, logSuccess, logError, logWarning } from '../utils/logger';

class SerieController {

  // Listar todas as s√©ries
  static async listarSeries(req: Request, res: Response): Promise<void> {
    try {
      logInfo('üìã Listando todas as s√©ries', 'controller');
      const series = await SerieService.listarSeries();
      
      logSuccess(`‚úÖ ${series.length} s√©ries encontradas`, 'controller');
      res.status(200).json({
        sucesso: true,
        dados: series
      });
    } catch (error) {
      logError('‚ùå Erro ao listar s√©ries', 'controller', error);
      res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor',
        erro: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // Buscar s√©rie por ID
  static async buscarSeriePorId(req: Request, res: Response): Promise<void> {
    try {
      const { serie_id } = req.params;
      logInfo(`üîç Buscando s√©rie por ID: ${serie_id}`, 'controller');
      
      const serie = await SerieService.buscarSeriePorId(serie_id);
      
      if (!serie) {
        logWarning(`‚ö†Ô∏è S√©rie n√£o encontrada: ${serie_id}`, 'controller');
        res.status(404).json({
          sucesso: false,
          mensagem: 'S√©rie n√£o encontrada'
        });
        return;
      }

      logSuccess(`‚úÖ S√©rie encontrada: ${serie.nome_serie}`, 'controller');
      res.status(200).json({
        sucesso: true,
        dados: serie
      });
    } catch (error) {
      logError('‚ùå Erro ao buscar s√©rie por ID', 'controller', error);
      
      if (error instanceof Error && error.message.includes('obrigat√≥rio')) {
        res.status(400).json({
          sucesso: false,
          mensagem: error.message
        });
        return;
      }

      res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor',
        erro: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // Buscar s√©rie por nome
  static async buscarSeriePorNome(req: Request, res: Response): Promise<void> {
    try {
      const { nome } = req.params;
      logInfo(`üîç Buscando s√©rie por nome: ${nome}`, 'controller');
      
      const serie = await SerieService.buscarSeriePorNome(nome);
      
      if (!serie) {
        logWarning(`‚ö†Ô∏è S√©rie n√£o encontrada com nome: ${nome}`, 'controller');
        res.status(404).json({
          sucesso: false,
          mensagem: 'S√©rie n√£o encontrada'
        });
        return;
      }

      logSuccess(`‚úÖ S√©rie encontrada: ${serie.nome_serie}`, 'controller');
      res.status(200).json({
        sucesso: true,
        dados: serie
      });
    } catch (error) {
      logError('‚ùå Erro ao buscar s√©rie por nome', 'controller', error);
      
      if (error instanceof Error && error.message.includes('obrigat√≥rio')) {
        res.status(400).json({
          sucesso: false,
          mensagem: error.message
        });
        return;
      }

      res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor',
        erro: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }
  // Criar s√©rie
  static async criarSerie(req: Request, res: Response): Promise<void> {
    try {
      logInfo(`üìù Criando nova s√©rie: ${req.body.nome_serie}`, 'controller');
      const serie = await SerieService.criarSerie(req.body);
      
      logSuccess(`‚úÖ S√©rie "${serie.nome_serie}" criada com sucesso [ID: ${serie.serie_id}]`, 'controller');
      res.status(201).json({
        sucesso: true,
        mensagem: 'S√©rie criada com sucesso',
        dados: serie
      });
    } catch (error) {
      logError(`‚ùå Erro ao criar s√©rie: ${req.body.nome_serie}`, 'controller', error);
      
      if (error instanceof Error) {
        if (error.message.includes('Dados inv√°lidos') || error.message.includes('obrigat√≥rio')) {
          res.status(400).json({
            sucesso: false,
            mensagem: error.message
          });
          return;
        }
        
        if (error.message.includes('J√° existe')) {
          res.status(409).json({
            sucesso: false,
            mensagem: error.message
          });
          return;
        }
      }
      
      res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor',
        erro: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // Atualizar s√©rie
  static async atualizarSerie(req: Request, res: Response): Promise<void> {
    try {
      const { serie_id } = req.params;
      logInfo(`‚úèÔ∏è Atualizando s√©rie: ${serie_id}`, 'controller');
      
      const serie = await SerieService.atualizarSerie(serie_id, req.body);
      
      if (!serie) {
        logWarning(`‚ö†Ô∏è S√©rie n√£o encontrada para atualiza√ß√£o: ${serie_id}`, 'controller');
        res.status(404).json({
          sucesso: false,
          mensagem: 'S√©rie n√£o encontrada'
        });
        return;
      }

      logSuccess(`‚úÖ S√©rie "${serie.nome_serie}" atualizada com sucesso`, 'controller');
      res.status(200).json({
        sucesso: true,
        mensagem: 'S√©rie atualizada com sucesso',
        dados: serie
      });
    } catch (error) {
      logError('‚ùå Erro ao atualizar s√©rie', 'controller', error);
      
      if (error instanceof Error) {
        if (error.message.includes('Dados inv√°lidos') || error.message.includes('obrigat√≥rio')) {
          res.status(400).json({
            sucesso: false,
            mensagem: error.message
          });
          return;
        }
        
        if (error.message.includes('n√£o encontrada')) {
          res.status(404).json({
            sucesso: false,
            mensagem: error.message
          });
          return;
        }
        
        if (error.message.includes('J√° existe')) {
          res.status(409).json({
            sucesso: false,
            mensagem: error.message
          });
          return;
        }
      }

      res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor',
        erro: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // Deletar s√©rie
  static async deletarSerie(req: Request, res: Response): Promise<void> {
    try {
      const { serie_id } = req.params;
      logInfo(`üóëÔ∏è Deletando s√©rie: ${serie_id}`, 'controller');
      
      const deletado = await SerieService.deletarSerie(serie_id);
      
      if (!deletado) {
        logWarning(`‚ö†Ô∏è S√©rie n√£o encontrada para dele√ß√£o: ${serie_id}`, 'controller');
        res.status(404).json({
          sucesso: false,
          mensagem: 'S√©rie n√£o encontrada'
        });
        return;
      }

      logSuccess(`‚úÖ S√©rie deletada com sucesso: ${serie_id}`, 'controller');
      res.status(200).json({
        sucesso: true,
        mensagem: 'S√©rie deletada com sucesso'
      });
    } catch (error) {
      logError('‚ùå Erro ao deletar s√©rie', 'controller', error);
      
      if (error instanceof Error) {
        if (error.message.includes('n√£o encontrada')) {
          res.status(404).json({
            sucesso: false,
            mensagem: error.message
          });
          return;
        }
        
        if (error.message.includes('possui turmas')) {
          res.status(409).json({
            sucesso: false,
            mensagem: error.message
          });
          return;
        }
      }

      res.status(500).json({
        sucesso: false,
        mensagem: 'Erro interno do servidor',
        erro: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }
}

export default SerieController;
